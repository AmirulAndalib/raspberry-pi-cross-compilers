#!/bin/bash

# ===============================================
# Raspberry Pi Toolchains(raspberry-pi-cross-compilers): This project
# provides latest automated GCC Cross Compiler & Native (ARM & ARM64)
# build-scripts and precompiled standalone toolchains for Raspberry Pi.

# Copyright (C) 2020 Abhishek Thakur(@abhiTronix) <abhi.una12@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
# ===============================================

# This script aauto downloads, compiles, and compresses Cross & Native GCC ARM64 Toolchain
# binaries targeting any Raspberry Pi 64-bit (like Pi64) OSes.

helpfunction() {
	#helper function that prints custom usage help menu
	echo ""
	echo ""
	figlet -t -k -f /usr/share/figlet/standard.flf "Raspberry Pi CLI Toolchains Base Builder 64-bit"
	echo ""
	figlet -t -k -f /usr/share/figlet/term.flf "Copyright (c) 2020 abhiTronix"
	echo ""
	echo ""
	echo "Usage: $0 -g [GCC version] -o [Target Pi OS type]"
	echo -e "\t-g GCC base version?: (8.3.0|10.2.1|12.2.0)"
	echo -e "\t-o What's yours Target Raspberry Pi OS type?: (buster|bullseye|bookworm)"
	echo ""
	echo ""
	exit 1 # Exits script after printing help
}

#input arguments handler
while getopts "g:o:" opt; do
	case "$opt" in
	g) GCC_VERSION="$OPTARG" ;;
	o) RPIOS_TYPE="$OPTARG" ;;
	?) helpfunction ;; #prints help function for invalid parameter
	esac
done
#validates parameters and print usage helper function in case parameters are missing
if [ -z "$GCC_VERSION" ]; then
	echo "Required parameter is missing!"
	helpfunction
elif [ -z "$RPIOS_TYPE" ]; then
	echo "Required parameter is missing!"
	helpfunction
else
	echo "Parameters configured!"
fi

#collect dependencies versions from raspberry pi os
if [ "$RPIOS_TYPE" = "bookworm" ]; then
	GLIBC_VERSION=2.36
	BINUTILS_VERSION=2.40
elif [ "$RPIOS_TYPE" = "buster" ]; then
	GLIBC_VERSION=2.28
	BINUTILS_VERSION=2.31.1
elif [ "$RPIOS_TYPE" = "bullseye" ]; then
	GLIBC_VERSION=2.31
	BINUTILS_VERSION=2.35.2
else
	echo "Invalid argument value: $RPIOS_TYPE"
	exit
fi

# exit if not valid GCC
if [ "$RPIOS_TYPE" = "bookworm" ] && [ "$GCC_VERSION" != "12.2.0" ]; then
	echo "Invalid GCC for bookworm: $GCC_VERSION!"
	exit
fi
# exit if not valid GCC
if [ "$RPIOS_TYPE" = "buster" ] && [ "$GCC_VERSION" != "8.3.0" ]; then
	echo "Invalid GCC for buster: $GCC_VERSION!"
	exit
fi
# exit if not valid GCC
if [ "$RPIOS_TYPE" = "bullseye" ] && [ "$GCC_VERSION" != "10.2.1" ]; then
	echo "Invalid GCC for bullseye: $GCC_VERSION!"
	exit
fi

#collect build directory if not defined
if [ "$BUILDDIR" = "" ]; then
	#select temp directory
	echo "Build directory is empty, using temp directory!"
	BUILDDIR=$(dirname "$(mktemp tmp.XXXXXXXXXX -ut)")
fi

#collect programming languages if not defined
if [ "$LANGUAGES" = "" ]; then
	#select temp directory
	echo "Building binaries for c,c++,fortran programming languages!"
	LANGUAGES=c,c++,fortran
fi

#pre-defined params
FOLDER_VERSION=64
KERNEL=kernel8
ARCH=armv8-a+fp+simd
TARGET=aarch64-linux-gnu
GDB_VERSION=10.2

#validate env variables
if ! [[ "$GCC_VERSION" =~ ^(8.3.0|10.2.1|12.2.0)$ ]]; then exit 1; fi
if ! [[ "$GLIBC_VERSION" =~ ^(2.28|2.31|2.36)$ ]]; then exit 1; fi
if ! [[ "$BINUTILS_VERSION" =~ ^(2.31.1|2.35.2|2.40)$ ]]; then exit 1; fi
if ! [[ "$FOLDER_VERSION" =~ ^(0|1|2)$ ]]; then exit 1; fi
if ! [[ "$KERNEL" =~ ^(kernel|kernel7)$ ]]; then exit 1; fi
if ! [[ "$ARCH" =~ ^(armv6|armv7-a|armv8-a)$ ]]; then exit 1; fi
if ! [[ "$FPU" =~ ^(vfp|neon-vfpv4|neon-fp-armv8)$ ]]; then exit 1; fi
if [ "$BUILDDIR" = "" ]; then exit 1; fi
if [ "$LANGUAGES" = "" ]; then exit 1; fi

echo "Downloading and Setting up build directories"
#setup paths
DOWNLOADDIR=$BUILDDIR/build_toolchains
INSTALLDIR=$BUILDDIR/cross-pi-gcc-$GCC_VERSION-$FOLDER_VERSION
SYSROOTDIR=$BUILDDIR/cross-pi-gcc-$GCC_VERSION-$FOLDER_VERSION/$TARGET/libc

#make dirs
mkdir -p "$DOWNLOADDIR"
mkdir -p "$INSTALLDIR"

cd "$DOWNLOADDIR" || exit
#download binaries if not found
if [ ! -d "linux" ]; then
	git clone --depth=1 https://github.com/raspberrypi/linux
fi
if [ ! -d "gcc-$GCC_VERSION" ]; then
	if [ ! -f "gcc-$GCC_VERSION.tar.gz" ]; then
		wget -q --no-check-certificate https://ftp.gnu.org/gnu/gcc/gcc-$GCC_VERSION/gcc-$GCC_VERSION.tar.gz
	fi
	tar xf gcc-$GCC_VERSION.tar.gz
	cd gcc-$GCC_VERSION || exit
	if [ "$GCC_VERSION" = "10.2.0" ]; then
		echo "Applying GCC patch!"
		sed -i -e '66i#define PATH_MAX 4096\' libsanitizer/asan/asan_linux.cpp
	fi
	mkdir -p build
	sed -i contrib/download_prerequisites -e '/base_url=/s/ftp/http/'
	contrib/download_prerequisites
	rm ./*.tar.* || true
	cd "$DOWNLOADDIR" || exit
	rm ./*.tar.* || true
fi
if [ ! -d "binutils-$BINUTILS_VERSION" ]; then
	if [ ! -f "binutils-$BINUTILS_VERSION.tar.bz2" ]; then
		wget -q --no-check-certificate https://ftp.gnu.org/gnu/binutils/binutils-$BINUTILS_VERSION.tar.bz2
	fi
	tar xf binutils-$BINUTILS_VERSION.tar.bz2
	cd binutils-$BINUTILS_VERSION || exit
	mkdir -p build
	cd "$DOWNLOADDIR" || exit
	rm ./*.tar.* || true
fi
if [ ! -d "glibc-$GLIBC_VERSION" ]; then
	# Download patched Glibc 2.31 if GCC 10 series are being built
	if [[ "$GCC_VERSION" =~ ^10.* ]] && [ "$GLIBC_VERSION" = "2.31" ]; then
		echo "Downloading patched Glibc v2.31!"
		git clone https://sourceware.org/git/glibc.git --branch release/2.31/master
		mv glibc glibc-$GLIBC_VERSION
	else
		if [ ! -f "glibc-$GLIBC_VERSION.tar.bz2" ]; then wget -q --no-check-certificate https://ftp.gnu.org/gnu/glibc/glibc-$GLIBC_VERSION.tar.bz2; fi
		tar xf glibc-$GLIBC_VERSION.tar.bz2
	fi
	cd glibc-$GLIBC_VERSION || exit
	mkdir -p build
	cd "$DOWNLOADDIR" || exit
	rm ./*.tar.* || true
fi
sed -i 's/#  include <limits.h>/#  include <linux\/limits.h>/' gcc-$GCC_VERSION/libsanitizer/asan/asan_linux.cpp
sed -i 's/#include <limits.h>/#include <linux\/limits.h>/' gcc-$GCC_VERSION/libsanitizer/asan/asan_linux.cpp

echo "Setting up paths..."
PATH=$BUILDDIR/cross-pi-gcc-$GCC_VERSION-$FOLDER_VERSION/bin:$PATH
unset LD_LIBRARY_PATH #patch

echo "Building Kernel Headers..."
cd "$DOWNLOADDIR"/linux || exit
KERNEL=$KERNEL
make -s ARCH=arm64 INSTALL_HDR_PATH="$SYSROOTDIR"/usr headers_install
mkdir -p "$SYSROOTDIR"/usr/lib

echo "Building binutils..."
if [ -n "$(ls -A "$DOWNLOADDIR"/binutils-$BINUTILS_VERSION/build)" ]; then rm -rf "$DOWNLOADDIR"/binutils-$BINUTILS_VERSION/build/*; fi
cd "$DOWNLOADDIR"/binutils-$BINUTILS_VERSION/build || exit
../configure --target=$TARGET --prefix= --with-arch=$ARCH --with-sysroot=/$TARGET/libc --with-build-sysroot="$SYSROOTDIR" --disable-multilib
make -s -j$(getconf _NPROCESSORS_ONLN)
make -s install-strip DESTDIR="$INSTALLDIR"
if [ -n "$(ls -A "$DOWNLOADDIR"/binutils-$BINUTILS_VERSION/build)" ]; then rm -rf "$DOWNLOADDIR"/binutils-$BINUTILS_VERSION/build/*; fi

echo "Building Cross GCC $GCC_VERSION BASE Binaries..."
if [ -n "$(ls -A "$DOWNLOADDIR"/gcc-$GCC_VERSION/build)" ]; then rm -rf "$DOWNLOADDIR"/gcc-$GCC_VERSION/build/*; fi
cd "$DOWNLOADDIR"/gcc-$GCC_VERSION/build || exit
../configure --prefix= --target=$TARGET --enable-languages=$LANGUAGES --with-sysroot=/$TARGET/libc --with-build-sysroot="$SYSROOTDIR" --with-arch=$ARCH --disable-multilib
make -s -j$(getconf _NPROCESSORS_ONLN) all-gcc
make -s install-strip-gcc DESTDIR="$INSTALLDIR"
if [ -n "$(ls -A "$DOWNLOADDIR"/glibc-$GLIBC_VERSION/build)" ]; then rm -rf "$DOWNLOADDIR"/glibc-$GLIBC_VERSION/build/*; fi
cd "$DOWNLOADDIR"/glibc-$GLIBC_VERSION/build || exit
../configure --prefix=/usr --build="$MACHTYPE" --host=$TARGET --target=$TARGET --with-arch=$ARCH --with-sysroot=/$TARGET/libc --with-build-sysroot="$SYSROOTDIR" --with-headers="$SYSROOTDIR"/usr/include --with-lib="$SYSROOTDIR"/usr/lib --disable-multilib libc_cv_forced_unwind=yes
make -s install-bootstrap-headers=yes install-headers DESTDIR="$SYSROOTDIR"
make -s -j$(getconf _NPROCESSORS_ONLN) csu/subdir_lib
install csu/crt1.o csu/crti.o csu/crtn.o "$SYSROOTDIR"/usr/lib
$TARGET-gcc -nostdlib -nostartfiles -shared -x c /dev/null -o "$SYSROOTDIR"/usr/lib/libc.so
touch "$SYSROOTDIR"/usr/include/gnu/stubs.h "$SYSROOTDIR"/usr/include/bits/stdio_lim.h
cd "$DOWNLOADDIR"/gcc-$GCC_VERSION/build || exit
make -s -j$(getconf _NPROCESSORS_ONLN) all-target-libgcc
make -s install-target-libgcc DESTDIR="$INSTALLDIR"
cd "$DOWNLOADDIR"/glibc-$GLIBC_VERSION/build || exit
make -s -j$(getconf _NPROCESSORS_ONLN)
make -s install DESTDIR="$SYSROOTDIR"
cd "$DOWNLOADDIR"/gcc-$GCC_VERSION/build || exit
if [ -n "$(ls -A "$DOWNLOADDIR"/glibc-$GLIBC_VERSION/build)" ]; then rm -rf "$DOWNLOADDIR"/glibc-$GLIBC_VERSION/build/*; fi
make -s -j$(getconf _NPROCESSORS_ONLN)
make -s install-strip DESTDIR="$INSTALLDIR"
if [ -n "$(ls -A "$DOWNLOADDIR"/gcc-$GCC_VERSION/build)" ]; then rm -rf "$DOWNLOADDIR"/gcc-$GCC_VERSION/build/*; fi

mv "$BUILDDIR"/cross-pi-gcc-"$GCC_VERSION"-$FOLDER_VERSION "$HOME"
cd "$HOME" || exit
#compress with maximum possible compression level.
tar cf - cross-pi-gcc-"$GCC_VERSION"-$FOLDER_VERSION | pigz -9 -p 32 >cross-gcc-"$GCC_VERSION"-pi_"$FOLDER_VERSION".tar.gz
echo "Done Building Cross GCC $GCC_VERSION BASE Binaries..."

#clean path
PATH=$(echo "$PATH" | sed -e 's;:\?$BUILDDIR/cross-pi-gcc-$GCC_VERSION-$FOLDER_VERSION/bin;;' -e 's;$BUILDDIR/cross-pi-gcc-$GCC_VERSION-$FOLDER_VERSION/bin:\?;;')

# throw error if archieve doesn't exists
if [[ ! -f "cross-gcc-$GCC_VERSION-pi_$FOLDER_VERSION.tar.gz" ]]; then
	echo "File cross-gcc-$GCC_VERSION-pi_$FOLDER_VERSION.tar.gz doesn't created. Aborting!"
	exit 1
else
	echo "File cross-gcc-$GCC_VERSION-pi_$FOLDER_VERSION.tar.gz of size $(stat -c%s "cross-gcc-$GCC_VERSION-pi_$FOLDER_VERSION.tar.gz") created successfully."
fi

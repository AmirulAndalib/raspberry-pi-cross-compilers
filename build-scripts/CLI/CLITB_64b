#!/bin/bash


# ===============================================
# Raspberry Pi Toolchains(raspberry-pi-cross-compilers): This project 
# provides latest automated GCC Cross Compiler & Native (ARM & ARM64) 
# build-scripts and precompiled standalone toolchains for Raspberry Pi.


# Copyright (C) 2020 Abhishek Thakur(@abhiTronix) <abhi.una12@gmail.com>


# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
# ===============================================



# This script aauto downloads, compiles, and compresses Cross & Native GCC ARM64 Toolchain 
# binaries targeting any Raspberry Pi 64-bit (like Pi64) OSes.


helpfunction()
{	
   #helper function that prints custom usage help menu
   echo ""
   echo ""
   figlet -t -k -f /usr/share/figlet/standard.flf "Raspberry Pi Toolchains Builder 64-bit"
   echo ""
   figlet -t -k -f /usr/share/figlet/term.flf "Copyright (c) 2020 abhiTronix"
   echo ""
   echo ""
   echo "Usage: $0 -g [GCC version] -t [Target OS type]"
   echo -e "\t-g GCC version you want to compile?: (7.1.0|7.2.0|7.3.0|7.4.0|7.5.0|8.1.0|8.2.0|8.3.0|9.1.0|9.2.0)"
   echo -e "\t-t What's yours Target OS type?: (1|2) [default:1]"
   echo ""
   echo ""
   exit 1 # Exits script after printing help
}



#input arguments handler
while getopts "g:t:" opt
do
   case "$opt" in
   	  g ) GCC_VERSION="$OPTARG" ;;
      t ) OS_TYPE="$OPTARG" ;;
      ? ) helpfunction ;; #prints help function for invalid parameter
   esac
done
#validates parameters and print usage helper function in case parameters are missing
if [ -z "$GCC_VERSION" ]; then
   echo "Error: Required parameter is missing!";
   helpfunction
elif [ -z "$OS_TYPE" ]; then
	OS_TYPE=1
else
	echo "Parameters configured!";
fi


#collect dependencies versions from raspberry pi os
if [ "$OS_TYPE" = "1" ] || [ "$GCC_VERSION" \< "8.3.0" ] ; then
	GCCBASE_VERSION=6.3.0
	GLIBC_VERSION=2.24
	BINUTILS_VERSION=2.28
elif [ "$OS_TYPE" = "2" ]; then
	GCCBASE_VERSION=8.3.0
	GLIBC_VERSION=2.28
	BINUTILS_VERSION=2.31
else
	echo "Invalid argument value: $OS_TYPE"
	exit
fi


#collect build directory if not defined
if [ "$BUILDDIR" = "" ]; then
	#select temp directory
	echo "Build directory is empty, using temp directory!"
	BUILDDIR=$(dirname "$(mktemp tmp.XXXXXXXXXX -ut)")
fi

#collect programming languages if not defined
if [ "$LANGUAGES" = "" ]; then
	#select temp directory
	echo "Building binaries for c,c++,fortran programming languages!"
	LANGUAGES=c,c++,fortran
fi


#pre-defined params
FOLDER_VERSION=64
KERNEL=kernel7
ARCH=armv8-a+fp+simd
TARGET=aarch64-linux-gnu
GDB_VERSION=8.3.1


#validate env variables
if ! [[ "$GCC_VERSION" =~ ^(7.1.0|7.2.0|7.3.0|7.4.0|7.5.0|8.1.0|8.2.0|8.3.0|9.1.0|9.2.0)$ ]]; then exit 1 ; fi
if ! [[ "$GCCBASE_VERSION" =~ ^(6.3.0|8.3.0)$ ]]; then exit 1 ; fi
if [ "$ARCH" != "armv8-a+fp+simd" ]; then exit 1 ; fi
if [ "$FOLDER_VERSION" != "64" ]; then exit 1 ; fi
if [ "$BUILDDIR" = "" ]; then exit 1 ; fi
if [ "$LANGUAGES" = "" ]; then exit 1 ; fi

URL="https://sourceforge.net/projects/raspberry-pi-cross-compilers/files/CLI%20Base"
if [ "$RPI_TYPE" = "64" ]; then URL="$URL/64/GCC%20$GCCBASE_VERSION/"; fi

echo "Downloading and Setting up build directories"
#setup paths
DOWNLOADDIR=$BUILDDIR/build_toolchains
INSTALLDIR=$BUILDDIR/cross-pi-gcc-$GCC_VERSION-$FOLDER_VERSION
SYSROOTDIR=$BUILDDIR/cross-pi-gcc-$GCC_VERSION-$FOLDER_VERSION/$TARGET/libc

#make dirs
mkdir -p "$DOWNLOADDIR"
mkdir -p "$INSTALLDIR"
mkdir -p "$BUILDDIR/cross-pi-gcc-$GCC_VERSION-$FOLDER_VERSION"

cd "$DOWNLOADDIR" || exit

#download binaries if not found
if [ ! -d "gcc-$GCCBASE_VERSION" ]; then
	if [ ! -f "cross-gcc-$GCCBASE_VERSION-pi_$RPI_TYPE.tar.gz" ]; then 
		wget -s "${URL}cross-gcc-$GCCBASE_VERSION-pi_$RPI_TYPE.tar.gz"; 
	fi
	tar xf cross-gcc-$GCCBASE_VERSION-pi_$RPI_TYPE.tar.gz
	mv -v cross-pi-gcc-$GCCBASE_VERSION-$FOLDER_VERSION/* INSTALLDIR
	rm -rf cross-pi-gcc-$GCCBASE_VERSION-$FOLDER_VERSION
	rm ./*.tar.*
fi
if [ ! -d "gdb-$GDB_VERSION" ]; then
	if [ ! -f "gdb-$GDB_VERSION.tar.xz" ]; then 
		wget -q https://ftp.gnu.org/gnu/gdb/gdb-$GDB_VERSION.tar.xz; 
	fi
	tar xf  gdb-$GDB_VERSION.tar.xz
	cd gdb-$GDB_VERSION || exit
	mkdir -p build 
	cd "$DOWNLOADDIR" || exit
	rm ./*.tar.*
fi
if [ ! -d "gcc-$GCC_VERSION" ]; then
	if [ ! -f "gcc-$GCC_VERSION.tar.gz" ]; then 
		wget -q  https://ftpmirror.gnu.org/gcc/gcc-"$GCC_VERSION"/gcc-"$GCC_VERSION".tar.gz; 
	fi
	tar xf gcc-"$GCC_VERSION".tar.gz
	cd gcc-"$GCC_VERSION" || exit
	mkdir -p build 
	sed -i contrib/download_prerequisites -e '/base_url=/s/ftp/http/'
	contrib/download_prerequisites
	rm ./*.tar.*
	cd "$DOWNLOADDIR" || exit
	rm ./*.tar.*
fi



echo "Setting up paths..."
PATH=$BUILDDIR/cross-pi-gcc-$GCC_VERSION-$FOLDER_VERSION/bin:$PATH
unset LD_LIBRARY_PATH #patch

if [ "$GCC_VERSION" != "$GCCBASE_VERSION" ]; then
	cd "$DOWNLOADDIR"/gcc-"$GCC_VERSION"/build || exit
	if [ -n "$(ls -A "$DOWNLOADDIR"/gcc-"$GCC_VERSION"/build)" ]; then rm -rf "$DOWNLOADDIR"/gcc-"$GCC_VERSION"/build/*; fi
	../configure --prefix= --target=$TARGET --enable-languages=$LANGUAGES --with-sysroot=/$TARGET/libc --with-build-sysroot="$SYSROOTDIR" --with-arch=$ARCH   --disable-multilib
	make -s -j$(nproc)
	make -s install DESTDIR="$INSTALLDIR"
	if [ -n "$(ls -A "$DOWNLOADDIR"/gcc-"$GCC_VERSION"/build)" ]; then rm -rf "$DOWNLOADDIR"/gcc-"$GCC_VERSION"/build/*; fi

	echo "Building GCC Native GCC $GCC_VERSION Binaries..."
	mkdir -p "$BUILDDIR"/native-pi-gcc-"$GCC_VERSION"-$FOLDER_VERSION
	cd "$DOWNLOADDIR"/gcc-"$GCC_VERSION"/build || exit
	if [ -n "$(ls -A "$DOWNLOADDIR"/gcc-"$GCC_VERSION"/build)" ]; then rm -rf "$DOWNLOADDIR"/gcc-"$GCC_VERSION"/build/*; fi
	../configure --prefix= --build="$MACHTYPE" --host=$TARGET --target=$TARGET --enable-languages=$LANGUAGES --with-arch=$ARCH    --disable-multilib --program-suffix=-"$GCC_VERSION"
	make -s -j$(nproc)
	make -s install-strip DESTDIR="$BUILDDIR"/native-pi-gcc-"$GCC_VERSION"-$FOLDER_VERSION
	if [ -n "$(ls -A "$DOWNLOADDIR"/gcc-"$GCC_VERSION"/build)" ]; then rm -rf "$DOWNLOADDIR"/gcc-"$GCC_VERSION"/build/*; fi
	cd "$DOWNLOADDIR"/gcc-"$GCC_VERSION" || exit
	cat gcc/limitx.h gcc/glimits.h gcc/limity.h > "$BUILDDIR"/native-pi-gcc-"$GCC_VERSION"-$FOLDER_VERSION/lib/gcc/$TARGET/"$GCC_VERSION"/include-fixed/limits.h

	echo "Building Native GDB Binaries..."
	cd "$DOWNLOADDIR"/gdb-$GDB_VERSION/build || exit
	if [ -n "$(ls -A "$DOWNLOADDIR"/gdb-$GDB_VERSION/build)" ]; then rm -rf "$DOWNLOADDIR"/gdb-$GDB_VERSION/build/*; fi
	../configure --prefix= --build="$MACHTYPE" --host=$TARGET --target=$TARGET --with-arch=$ARCH  --program-suffix=-"$GCC_VERSION"
	make -s -j$(nproc)
	make -s install DESTDIR="$BUILDDIR"/native-pi-gcc-"$GCC_VERSION"-$FOLDER_VERSION
	if [ -n "$(ls -A "$DOWNLOADDIR"/gdb-$GDB_VERSION/build)" ]; then rm -rf "$DOWNLOADDIR"/gdb-$GDB_VERSION/build/*; fi
	echo "Done Building Native GDB Binaries..."

	mv "$BUILDDIR"/native-pi-gcc-"$GCC_VERSION"-$FOLDER_VERSION "$HOME"
	cd "$HOME" || exit
	#compress with maximum possible compression level.
	env GZIP=-9 tar cvzf native-gcc-"$GCC_VERSION"-pi_$FOLDER_VERSION.tar.gz native-pi-gcc-"$GCC_VERSION"-$FOLDER_VERSION
	rm -rf "$HOME"/native-pi-gcc-"$GCC_VERSION"-$FOLDER_VERSION
	echo "Done Building Native GCC $GCC_VERSION Binaries..."
fi

cd  "$DOWNLOADDIR"/gcc-"$GCC_VERSION" || exit
cat gcc/limitx.h gcc/glimits.h gcc/limity.h > $(dirname $($TARGET-gcc -print-libgcc-file-name))/include-fixed/limits.h

echo "Building Cross GDB Binaries..."
cd "$DOWNLOADDIR"/gdb-$GDB_VERSION/build || exit
if [ -n "$(ls -A "$DOWNLOADDIR"/gdb-$GDB_VERSION/build)" ]; then rm -rf "$DOWNLOADDIR"/gdb-$GDB_VERSION/build/*; fi
../configure --prefix= --target=$TARGET --with-arch=$ARCH  --with-float=hard
make -s -j$(nproc)
make -s install DESTDIR="$INSTALLDIR"
if [ -n "$(ls -A "$DOWNLOADDIR"/gdb-$GDB_VERSION/build)" ]; then rm -rf "$DOWNLOADDIR"/gdb-$GDB_VERSION/build/*; fi
echo "Done Building Cross GDB Binaries..."

mv "$BUILDDIR"/cross-pi-gcc-"$GCC_VERSION"-$FOLDER_VERSION "$HOME"
cd "$HOME" || exit
#compress with maximum possible compression level.
env GZIP=-9 tar cvzf cross-gcc-"$GCC_VERSION"-pi_"$FOLDER_VERSION".tar.gz cross-pi-gcc-"$GCC_VERSION"-$FOLDER_VERSION
echo "Done Building Cross GCC $GCC_VERSION Binaries..."
rm -rf "$HOME"/cross-pi-gcc-"$GCC_VERSION"-$FOLDER_VERSION

#clean path
PATH=$(echo "$PATH" | sed -e 's;:\?$BUILDDIR/cross-pi-gcc-$GCC_VERSION-$FOLDER_VERSION/bin;;' -e 's;$BUILDDIR/cross-pi-gcc-$GCC_VERSION-$FOLDER_VERSION/bin:\?;;')